# -*- coding: utf-8 -*-
"""LIBRARY MANAGEMENT BY OOPS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c6kOPxq7L6R3DcmsBHwI0f9Nyrw046km

**Features:**

**User Features:**

Borrow Books:

Users can borrow books from different libraries if the book is available. Users can borrow a maximum of 3 books at a time.

Return Books:

 Users can return borrowed books to the library.

View Borrowed Books:

 Users can view a list of books they have borrowed.

**Admin Features:**

View Borrowed Books:

 Admins can view which books have been borrowed by which users across all libraries.

Display Books:

 Admins can view all books available in each library, including the number of copies available.

Libraries:

Multiple libraries can be added to the system. Each library has its own collection of books, and users can borrow books from any available library.

**Classes:**

Book:

Represents a book with attributes like title, author, number of available copies, and a flag to check if it's borrowed.

User:

Represents a user who can borrow and return books. It maintains a list of borrowed books.

Library:

Represents a library, which holds a collection of books and registered users. It allows adding books, adding users, and searching for books.

LibrarySystem:

The core of the application that manages libraries and users. It provides methods for borrowing and returning books, as well as handling user and admin interactions.

Flow:

Users can log in by entering their username and interact with the system through a menu-based interface.

Admins can log in using a password and manage the library's collection and view borrowed books.

Books can be borrowed if available, and users can return books once they are done.
"""

class Book:
    def __init__(self, title, author, copies):
        self.title = title
        self.author = author
        self.is_borrowed = False
        self.copies = copies

class User:
    def __init__(self, user_name, user_id, email):
        self.user_name = user_name
        self.user_id = user_id
        self.email = email
        self.borrowed_books = []

    def borrow_book(self, book):
        if len(self.borrowed_books) < 3:
            if book.copies > 0:
                book.copies -= 1
                self.borrowed_books.append(book)
                print(f"{self.user_name} has borrowed '{book.title}'.")
            else:
                print(f"Sorry, {book.title} is not available right now.")
        else:
            print(f"{self.user_name} has reached the maximum borrow limit of 3 books.")

    def return_book(self, book):
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            book.copies += 1
            print(f"{self.user_name} has returned '{book.title}'.")
        else:
            print(f"{self.user_name} did not borrow '{book.title}'.")

    def view_borrowed_books(self):
        if len(self.borrowed_books) > 0:
            print(f"\n{self.user_name}'s Borrowed Books:")
            for book in self.borrowed_books:
                print(f" - '{book.title}' by {book.author}")
        else:
            print(f"{self.user_name} has no borrowed books.")

class Library:
    def __init__(self, name):
        self.books = []
        self.name = name
        self.users = []

    def add_book(self, book):
        self.books.append(book)

    def add_user(self, user):
        self.users.append(user)

    def display_books(self):
        print(f"\nBooks available in {self.name}:")
        available = False
        for book in self.books:
            if book.copies > 0:
                print(f" - {book.title} by {book.author} (Copies available: {book.copies})")
                available = True
        if not available:
            print("No books available right now.")

    def admin_view_borrowed_books(self):
        print(f"\nBooks borrowed from {self.name}:")
        for user in self.users:
            for book in user.borrowed_books:
                print(f"{user.user_name} has borrowed '{book.title}' by {book.author}")

    def search_book(self, title):
        for book in self.books:
            if book.title.lower() == title.lower() and book.copies > 0:
                return book
        return None

class LibrarySystem:
    def __init__(self):
        self.libraries = []
        self.users = []

    def add_library(self, library):
        self.libraries.append(library)

    def add_user(self, user):
        self.users.append(user)

    def borrow_from_library(self, library_name, title, user):
        for library in self.libraries:
            if library.name.lower() == library_name.lower():
                book = library.search_book(title)
                if book:
                    user.borrow_book(book)
                    print(f"You have successfully borrowed '{title}' from {library_name}.")
                    return True
                else:
                    print(f"Sorry, '{title}' is not available at {library_name} right now.")
                    return False
        return False

    def return_to_library(self, library_name, title, user):
        for library in self.libraries:
            if library.name.lower() == library_name.lower():
                for book in user.borrowed_books:
                    if book.title.lower() == title.lower():
                        user.return_book(book)
                        print(f"Thank you for returning '{title}' to {library_name}.")
                        return True
        return False

    def display_admin_menu(self):
        print("\n=== Admin Menu ===")
        print("1. View all borrowed books by users")
        print("2. Display all books in each library")
        print("3. Exit")

    def display_user_menu(self):
        print("\n=== User Menu ===")
        print("1. View my borrowed books")
        print("2. Borrow a book")
        print("3. Return a book")
        print("4. Exit")
def main():
    system = LibrarySystem()
    city_library = Library("City Library")
    college_library = Library("College Library")
    community_library = Library("Community Library")
    system.add_library(city_library)
    system.add_library(college_library)
    system.add_library(community_library)
    book1 = Book("The Alchemist", "Paulo Coelho", 5)
    book2 = Book("1984", "George Orwell", 2)
    book3 = Book("The Catcher in the Rye", "J.D. Salinger", 4)
    city_library.add_book(book1)
    city_library.add_book(book2)
    city_library.add_book(book3)
    user1 = User("Leela", 101, "leela@example.com")
    user2 = User("Prashanthi", 102, "pras@example.com")
    city_library.add_user(user1)
    city_library.add_user(user2)
    system.add_user(user1)
    system.add_user(user2)
    while True:
        print("\n=== Main Menu ===")
        print("1. Admin Login")
        print("2. User Login")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ")
        if choice == '1':
            admin_password = input("Enter admin password: ")
            if admin_password == "admin123":
                while True:
                    system.display_admin_menu()
                    admin_choice = input("Enter your choice: ")

                    if admin_choice == '1':
                        for library in system.libraries:
                            library.admin_view_borrowed_books()

                    elif admin_choice == '2':
                        for library in system.libraries:
                            library.display_books()

                    elif admin_choice == '3':
                        print("Exiting admin menu.")
                        break

                    else:
                        print("Invalid choice. Please try again.")
            else:
                print("Incorrect admin password.")

        elif choice == '2':
            username = input("Enter your name: ")
            for user in system.users:
                if user.user_name.lower() == username.lower():
                    while True:
                        system.display_user_menu()
                        user_choice = input("Enter your choice: ")

                        if user_choice == '1':
                            user.view_borrowed_books()

                        elif user_choice == '2':
                            title = input("Enter the title of the book you want to borrow: ")
                            available_libraries = []
                            for library in system.libraries:
                                if library.search_book(title):
                                    available_libraries.append(library.name)
                            if available_libraries:
                                print(f"Available at: {', '.join(available_libraries)}")
                                lib_name = input("Enter the name of the library you want to borrow from: ")
                                if system.borrow_from_library(lib_name, title, user):
                                    print(f"You have successfully borrowed '{title}' from {lib_name}.")
                                else:
                                    print(f"Sorry, '{title}' is not available at {lib_name} right now.")
                            else:
                                print(f"Sorry, '{title}' is not available to borrow.")

                        elif user_choice == '3':
                            title = input("Enter the title of the book you want to return: ")
                            lib_name = input("Enter the name of the library you are returning it to: ")
                            if system.return_to_library(lib_name, title, user):
                                print(f"Thank you for returning '{title}' to {lib_name}.")
                            else:
                                print(f"Return failed. Check the title and library name again.")
                        elif user_choice == '4':
                            print(f"Goodbye {username}!")
                            break

                        else:
                            print("Invalid choice. Please try again.")
                    break
            else:
                print("User not found.")

        elif choice == '3':
            print("Thank you for using the Library System. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()